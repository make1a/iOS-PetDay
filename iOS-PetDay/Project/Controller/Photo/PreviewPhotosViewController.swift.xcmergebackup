//
//  PreviewPhotosViewController.swift
//  iOS-PetDay
//
//  Created by make on 2018/3/29.
//  Copyright © 2018年 Fidetro. All rights reserved.
//

import UIKit
import Hero
import Photos

class PreviewPhotosViewController: UIViewController {
   
    @IBOutlet weak var collectionView: UICollectionView!
    //数据源
    lazy var dataSource: [UIImage] = {
        var data = [UIImage]()
        return data
    }()
    
    var fetchAllPhotos: PHFetchResult<PHAsset>!
    
    var selectedIndex: IndexPath?
    var panGR = UIPanGestureRecognizer()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        collectionView.register(PreviewPhotosCell.self, forCellWithReuseIdentifier: PreviewPhotosCell.identifier)
        configCollectionView()
    }


    @objc func pan() {
        let translation = panGR.translation(in: nil)
        let progress = translation.y / 2 / collectionView!.bounds.height
        switch panGR.state {
        case .began:
            hero.dismissViewController()
        case .changed:
            Hero.shared.update(progress)
            if let cell = collectionView?.visibleCells[0]  as? PreviewPhotosCell {
                let currentPos = CGPoint(x: translation.x + view.center.x, y: translation.y + view.center.y)
                Hero.shared.apply(modifiers: [.position(currentPos)], to: cell.photoImageView)
            }
        default:
            if progress + panGR.velocity(in: nil).y / collectionView!.bounds.height > 0.3 {
                Hero.shared.finish()
            } else {
                Hero.shared.cancel()
            }
        }
    }
    
    func configCollectionView() {        
        automaticallyAdjustsScrollViewInsets = false
        preferredContentSize = CGSize(width: view.bounds.width, height: view.bounds.width)        
        view.layoutIfNeeded()
        collectionView!.reloadData()
        if let selectedIndex = selectedIndex {
            collectionView!.scrollToItem(at: selectedIndex, at: .centeredHorizontally, animated: false)
        }
        panGR.addTarget(self, action: #selector(pan))
        panGR.delegate = self
        collectionView?.addGestureRecognizer(panGR)
    }
}
extension PreviewPhotosViewController:UICollectionViewDelegate,UICollectionViewDataSource {
     func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return fetchAllPhotos.count
    }
    
     func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
       let imageCell = PreviewPhotosCell.dequeueReusable(withCollectionView: collectionView, for: indexPath)
        let asset = fetchAllPhotos.object(at: indexPath.item)
        imageCell.representAssetIdentifier = asset.localIdentifier
          let options = PHImageRequestOptions()
        options.resizeMode = .fast
        options.deliveryMode = .opportunistic
        options.isSynchronous = true
        PHImageManager.default().requestImage(for: asset, targetSize: PHImageManagerMaximumSize, contentMode: .aspectFill, options: options) { (image, _) in
            if imageCell.representAssetIdentifier == asset.localIdentifier {
                imageCell.setupImage(image)
            }
        }
        imageCell.photoImageView.heroID = "image_\(indexPath.item)"
        imageCell.photoImageView.heroModifiers = [.position(CGPoint(x:view.bounds.width/2, y:view.bounds.height+view.bounds.width/2)), .scale(0.6), .fade]
        return imageCell
    }
    
}

extension PreviewPhotosViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize.init(width: CGFloat.screenWidth(),
                           height: CGFloat.screenHeight()-navigationHeight())
    }
}

extension PreviewPhotosViewController:UIGestureRecognizerDelegate {
    func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -> Bool {
        if let cell = collectionView?.visibleCells[0] as? PreviewPhotosCell,
            cell.scrollView.zoomScale == 1 {
            let v = panGR.velocity(in: nil)
            return v.y > abs(v.x)
        }
        return false
    }
}
